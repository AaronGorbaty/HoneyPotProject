#!/bin/bash

if [ $# -ne 3 ]; then
  echo "usage: $0 <container_name external_IP_address mitm_port>"
  exit 1
fi

# Note: For assigning a new configuration for the IP, we will pass in a random string for the CONTAINER_NAME argument
CONTAINER_NAME=$1
EXTERNAL_IP=$2
MITM_PORT=$3
DIRECTORY_NAME=""

if [ -z $(sudo lxc-ls "$CONTAINER_NAME") ]; then # If container does not exist...

  # Generate a random number within the specified range using OpenSSL
  random_hex=$(openssl rand -hex 1 | colrm 2)

  # The following if statements are used to randomly assign a configuration to the IP address:
  # Depending on the hex number generated by openssl we spin up the associated honeypot configuration
  if [[ $random_hex == "0" || $random_hex == "1" || $random_hex == "2" || $random_hex == "3" ]]
  then
    # Set the name and open port for the configuration
    CONTAINER_NAME="SSH_$EXTERNAL_IP"
    DIRECTORY_NAME="control_honeypot"

    # Create and start container for specific configuration
    # Note: Control Honeypot SSH Server will be installed below, no need to do anything more for control
    sudo lxc-create -n $CONTAINER_NAME -t download -- -d ubuntu -r focal -a amd64
    sudo lxc-start -n $CONTAINER_NAME
    sleep 5

    sudo lxc-attach -n $CONTAINER_NAME -- bash -c "echo y | sudo apt-get update
    echo y | sudo apt-get install ufw
    sed -i 's/IPV6=yes/IPV6=no/' /etc/default/ufw
    sudo systemctl restart ufw"

  elif [[ $random_hex == "4" || $random_hex  == "5" || $random_hex == "6" || $random_hex == "7" ]]
  then
    # Set the name and open port for the configuration
    CONTAINER_NAME="HTTP_$EXTERNAL_IP"
    DIRECTORY_NAME="HTTP_honeypot"

    # Create and start specific configuration
    # Need to install necessary service
    sudo lxc-create -n $CONTAINER_NAME -t download -- -d ubuntu -r focal -a amd64
    sudo lxc-start -n $CONTAINER_NAME
    sleep 5

    sudo lxc-attach -n $CONTAINER_NAME -- bash -c "echo y | sudo apt-get update
    echo y | sudo apt-get install apache2
    echo y | sudo apt-get install ufw
    sed -i 's/IPV6=yes/IPV6=no/' /etc/default/ufw
    sudo systemctl restart ufw"
    sudo lxc-attach -n $CONTAINER_NAME -- sudo ufw allow 'Apache'

  elif [[ $random_hex == "8" || $random_hex  == "9" || $random_hex == "a" || $random_hex == "b" ]]
  then
    # Set the name and open port for the configuration
    CONTAINER_NAME="HTTPS_$EXTERNAL_IP"
    DIRECTORY_NAME="HTTPS_honeypot"

    # Create and start specific configuration
    # Need to install necessary service
    sudo lxc-create -n $CONTAINER_NAME -t download -- -d ubuntu -r focal -a amd64
    sudo lxc-start -n $CONTAINER_NAME
    sleep 5

    sudo lxc-attach -n $CONTAINER_NAME -- bash -c "echo y | sudo apt-get update
    echo y | sudo apt-get install apache2
    echo y | sudo apt-get install ufw
    sed -i 's/IPV6=yes/IPV6=no/' /etc/default/ufw
    sudo systemctl restart ufw"
    sudo lxc-attach -n $CONTAINER_NAME -- bash -c "sudo ufw allow 'Apache Secure'
    echo 'Listen 443' > /etc/apache2/ports.conf
    sudo systemctl restart apache2"

  elif [[ $random_hex == "c" || $random_hex == "d" || $random_hex == "e" || $random_hex == "f" ]]
  then
    # Set the name and open port for the configuration
    CONTAINER_NAME="SMTP_$EXTERNAL_IP"
    DIRECTORY_NAME="SMTP_honeypot"

    # Create and start specific configuration
    # Need to install necessary service
    sudo lxc-create -n $CONTAINER_NAME -t download -- -d ubuntu -r focal -a amd64
    sudo lxc-start -n $CONTAINER_NAME
    sleep 5

    sudo lxc-attach -n $CONTAINER_NAME -- bash -c "echo y | sudo apt-get update
    echo y | sudo DEBIAN_FRONTEND=noninteractive apt-get install postfix
    sed -i 's/myhostname = .*/myhostname = smtp.example.com/' /etc/postfix/main.cf
    sudo systemctl restart postfix
    echo y | sudo apt-get install ufw
    sed -i 's/IPV6=yes/IPV6=no/' /etc/default/ufw
    sudo systemctl restart ufw"
    sudo lxc-attach -n $CONTAINER_NAME -- sudo ufw allow 'Postfix'

  fi

  # Install openssh and allow permit root login
  sudo lxc-attach -n $CONTAINER_NAME -- bash -c "echo -e 'y\n' | sudo apt-get install openssh-server
  sed -i '/#PermitRootLogin prohibit-password/c\\PermitRootLogin yes' /etc/ssh/sshd_config
  systemctl restart ssh"
  sudo lxc-attach -n $CONTAINER_NAME -- sudo ufw allow 'OpenSSH'

  # Enable ufw rules configured earlier
  sudo lxc-attach -n $CONTAINER_NAME -- sudo ufw enable

  # (old) Limit only one session for the root user for the container, prevents two attackers from logging in at the same time
  #sudo lxc-attach -n $CONTAINER_NAME -- bash -c "echo 'AllowUsers root' >> /etc/ssh/sshd_config
  #echo 'MaxSessions 1' >> /etc/ssh/sshd_config
  #sudo systemctl restart ssh"

  # Assign container to external IP address
  sudo sysctl -w net.ipv4.conf.all.route_localnet=1
  CONTAINER_IP=$(sudo lxc-info $CONTAINER_NAME -iH)
  sudo ip addr add $EXTERNAL_IP/24 brd + dev eth1
  sudo iptables --table nat --insert PREROUTING --source 0.0.0.0/0 --destination $EXTERNAL_IP --jump DNAT --to-destination $CONTAINER_IP
  sudo iptables --table nat --insert POSTROUTING --source $CONTAINER_IP --destination 0.0.0.0/0 --jump SNAT --to-source $EXTERNAL_IP

  # Create firewall rule
  # sudo iptables --insert FORWARD --source $CONTAINER_IP --destination 0.0.0.0/0 --protocol 0 --dport $OPEN_PORT --jump ACCEPT
  # sudo iptables --insert FORWARD --source 0.0.0.0/0 --destination $EXTERNAL_IP --protocol 0 --dport $OPEN_PORT --jump ACCEPT

  # Port forwarding ssh traffic to MITM
  sudo iptables --table nat --insert PREROUTING --source 0.0.0.0/0 --destination $EXTERNAL_IP --protocol tcp --dport 22 --jump DNAT --to-destination 10.0.3.1:$MITM_PORT

  # Start MITM server, running the forever command to be listening on a specific port
  LOG_FILE="$CONTAINER_NAME.log -> $(date)"
  sudo forever -l /home/student/host_logs/$DIRECTORY_NAME/"$LOG_FILE" -a start --uid "mitm_id_$CONTAINER_NAME" /home/student/MITM/mitm.js -n $CONTAINER_NAME -i $CONTAINER_IP -p $MITM_PORT --auto-access --auto-access-fixed 1 --debug --mitm-ip 10.0.3.1

  # Call attacker detection script with the necessary arguments
  /home/student/scripts/attacker_detection.sh /home/student/host_logs/$DIRECTORY_NAME/"$LOG_FILE" $CONTAINER_NAME $EXTERNAL_IP $MITM_PORT &

else
  # Attacker detection script triggers this section
  # If container already exists delete container and iptables rules
  CONTAINER_IP=$(sudo lxc-info $CONTAINER_NAME -iH)
  sudo ip addr delete $EXTERNAL_IP/24 brd + dev eth1
  sudo iptables --table nat --delete POSTROUTING --source $CONTAINER_IP --destination 0.0.0.0/0 --jump SNAT --to-source $EXTERNAL_IP
  sudo iptables --table nat --delete PREROUTING --source 0.0.0.0/0 --destination $EXTERNAL_IP --jump DNAT --to-destination $CONTAINER_IP
  sudo iptables --table nat --delete PREROUTING --source 0.0.0.0/0 --destination $EXTERNAL_IP --protocol tcp --dport 22 --jump DNAT --to-destination 10.0.3.1:$MITM_PORT

  # Delete the firewall rules for the container
  # sudo iptables --delete FORWARD --source $CONTAINER_IP --destination 0.0.0.0/0 --protocol 0 --dport $OPEN_PORT --jump ACCEPT
  # sudo iptables --delete FORWARD --source 0.0.0.0/0 --destination $EXTERNAL_IP --protocol 0 --dport $OPEN_PORT --jump ACCEPT

  # Stop the MITM instance for the container
  sudo forever stop "mitm_id_$CONTAINER_NAME"

  # Stop the container and destroy it
  sudo lxc-destroy -f -n $CONTAINER_NAME

  # Call the recycling script again for the same IP
  /home/student/scripts/recycler.sh "yay" $EXTERNAL_IP $MITM_PORT &

fi
